include "./Types/WifiScanStatus.fbs";
include "./Types/WifiNetwork.fbs";
include "./Types/WifiNetworkEventType.fbs";
include "./ConfigFile.fbs";

attribute "fs_serializer";

namespace OpenShock.Serialization.Local;

table ReadyMessage {
  /// Poggies is always true.
  poggies:bool;

  /// The configuration of the device.
  config:Configuration.Config;

  /// Whether the device is linked to an account. (Has a valid access token)
  account_linked:bool;

  /// The wifi network that the device is currently connected to.
  connected_wifi:Types.WifiNetwork;
}

table ErrorMessage {
  message:string;
}

struct WifiScanStatusMessage {
  status:Types.WifiScanStatus;
}
table WifiNetworkEvent {
  event_type:Types.WifiNetworkEventType;
  network:Types.WifiNetwork;
}
table WifiIpAddressChangedEvent {
  ip_address:string;
}

enum AccountLinkResultCode : uint8 {
  Success = 0,
  CodeRequired = 1,
  InvalidCodeLength = 2,
  NoInternetConnection = 3,
  InvalidCode = 4,
  InternalError = 5
}

struct AccountLinkCommandResult {
  result:AccountLinkResultCode;
}

enum SetRfPinResultCode : uint8 {
  Success = 0,
  InvalidPin = 1,
  InternalError = 2
}
struct SetRfTxPinCommandResult {
  pin:uint8;
  result:SetRfPinResultCode;
}

union DeviceToLocalMessagePayload {

  // General stuff
  ReadyMessage,
  ErrorMessage,

  // Wifi stuff
  WifiScanStatusMessage,
  WifiNetworkEvent,
  WifiIpAddressChangedEvent,

  // Account linking stuff
  AccountLinkCommandResult,

  // RF transmitter stuff
  SetRfTxPinCommandResult
}

table DeviceToLocalMessage (fs_serializer) {
  payload:DeviceToLocalMessagePayload;
}

root_type DeviceToLocalMessage;
